/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nz.ac.aut.pdc.ChessHits.GUI;

import java.awt.Component;
import java.util.Collection;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import nz.ac.aut.pdc.ChessHits.model.*;
import nz.ac.aut.pdc.ChessHits.model.pieces.*;

/**
 *
 * @author gl modified by Yue
 */
public class SquarePanel extends javax.swing.JPanel {

    private Square square;
    private Piece piece;
    private ChessHitsGame game;
    private int row;
    private int col;
    private MainFrame frame;

    /**
     * Creates new form SquarePanel
     */
    public SquarePanel(ChessHitsGame game, int row, int col, MainFrame frame) {
        this.game = game;
        this.row = row;
        this.col = col;
        this.frame = frame;
        square = game.getSquare(row, col);
        piece = square.getOccupiedPiece();
        initComponents();
        update();
        if (row == 0 && col == 0) {
            this.setBackground(java.awt.Color.GRAY);
        } else if (row == 0 && col % 2 == 0) {
            this.setBackground(java.awt.Color.GRAY);
        } else if (row % 2 == 0 && col % 2 == 0) {
            this.setBackground(java.awt.Color.GRAY);
        } else if (row % 2 == 0 && col == 0) {
            this.setBackground(java.awt.Color.GRAY);
        } else if (row == 0 && col % 2 == 0) {
            this.setBackground(java.awt.Color.GRAY);
        } else if (row % 2 != 0 && col % 2 != 0) {
            this.setBackground(java.awt.Color.GRAY);
        } else {
            this.setBackground(java.awt.Color.WHITE);
        }
    }

    public final void update() {
        lblRep.setIcon(null);
        if (!square.isSquareAvailable()) {
            String pieceFileName = piece.getStringRepresentation() + Integer.toString(piece.getHP()) + "health";
            System.out.println(getClass().getResource("/nz/ac/aut/pdc/ChessHits/GUI/images/" + pieceFileName + ".png"));
            ImageIcon icon = new ImageIcon(getClass().getResource("/nz/ac/aut/pdc/ChessHits/GUI/images/" + pieceFileName + ".png"));
            lblRep.setIcon(icon);
            if (piece.getColor() == Color.BLACK) {
                lblRep.setForeground(java.awt.Color.BLACK);
            } else {
                lblRep.setForeground(java.awt.Color.LIGHT_GRAY);
            }

        } else {
            lblRep.setText("");
        }
        if (this.square.getOccupiedPiece() != null) {
            this.square.getOccupiedPiece().allPossibleMoves().contains(square);
        }
    }

    public void fullUpdate() {
        lblRep.setIcon(null);
        if (!square.isSquareAvailable()) {
            String pieceFileName = piece.getStringRepresentation() + Integer.toString(piece.getHP()) + "health";
            ImageIcon icon = new ImageIcon(getClass().getResource("/nz/ac/aut/pdc/ChessHits/GUI/images/" + pieceFileName + ".png"));
            lblRep.setIcon(icon);
            if (piece.getColor() == Color.BLACK) {
                lblRep.setForeground(java.awt.Color.BLACK);
            } else {
                lblRep.setForeground(java.awt.Color.LIGHT_GRAY);
            }

        } else {
            lblRep.setText("");
        }
        if (row == 0 && col == 0) {
            this.setBackground(java.awt.Color.GRAY);
        } else if (row == 0 && col % 2 == 0) {
            this.setBackground(java.awt.Color.GRAY);
        } else if (row % 2 == 0 && col % 2 == 0) {
            this.setBackground(java.awt.Color.GRAY);
        } else if (row % 2 == 0 && col == 0) {
            this.setBackground(java.awt.Color.GRAY);
        } else if (row == 0 && col % 2 == 0) {
            this.setBackground(java.awt.Color.GRAY);
        } else if (row % 2 != 0 && col % 2 != 0) {
            this.setBackground(java.awt.Color.GRAY);
        } else {
            this.setBackground(java.awt.Color.WHITE);
        }
    }

    public Square getSquare() {
        return this.square;
    }

    public JLabel getLabelRepresentation() {
        return this.lblRep;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblRep = new javax.swing.JLabel();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        lblRep.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblRepMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblRep, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(lblRep, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseReleased

    private void lblRepMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRepMouseReleased
        // TODO add your handling code here:
        boolean turn = game.getSelectedSquare(square);
        piece = square.getOccupiedPiece();
        if (piece != null) {
            if (piece instanceof Pawn && piece.getColor() == Color.BLACK && piece.getCurrentPosition().getRow() == 0
                    || piece instanceof Pawn && piece.getColor() == Color.WHITE && piece.getCurrentPosition().getRow() == 7) {
                Pawn pawn = (Pawn) piece;

                int value = JOptionPane.showOptionDialog(frame, "Promotion", "Promote", JOptionPane.DEFAULT_OPTION,
                        JOptionPane.INFORMATION_MESSAGE, null, pawn.getPromotionList(), pawn.getPromotionList()[0]);
                switch (value) {
                    case 0:
                        this.piece = this.game.promotePawn(pawn, "Queen");
                        break;
                    case 1:
                        this.piece = this.game.promotePawn(pawn, "Rook");
                        break;
                    case 2:
                        this.piece = this.game.promotePawn(pawn, "Bishop");
                        break;
                    case 3:
                        this.piece = this.game.promotePawn(pawn, "Knight");
                        break;
                    default:
                        System.err.println("error occured");
                        break;
                }
            }
            this.setBackground(java.awt.Color.ORANGE);
            Collection<Square> movableSquares = piece.allPossibleMoves();
            for (Component component : getParent().getComponents()) {
                SquarePanel sp = (SquarePanel) component;
                if (turn) {
                    sp.update();
                    if (movableSquares.contains(sp.getSquare())) {
                        if (sp.square.isSquareAvailable()) {
                            java.awt.Color color = new java.awt.Color(36, 218, 85, 180);//rgb transparent
                            sp.setBackground(color);//(java.awt.Color.GREEN);
                        } else if (sp.getSquare().getOccupiedPiece().getColor() != this.piece.getColor()) {
                            sp.setBackground(java.awt.Color.red);
                        }
                    }
                } else {
                    sp.fullUpdate();
                }
            }
        } else {
            for (Component component : getParent().getComponents()) {
                SquarePanel sp = (SquarePanel) component;
                sp.fullUpdate();
            }
        }
        this.frame.updateText();
        if (!this.game.getGameStatus()) {
            int option = JOptionPane.showConfirmDialog(frame, this.game.getWinner().getName()
                    + " has won the game.\n Would you like to play again?(Yes to play again, No to exit game)");
            if (option == 0) {
                this.frame.startNewGame();
            }
            if (option == 1) {
                this.frame.dispose();
            }
        }

    }//GEN-LAST:event_lblRepMouseReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblRep;
    // End of variables declaration//GEN-END:variables
}